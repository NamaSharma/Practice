//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ATMEntities : DbContext
    {
        public ATMEntities()
            : base("name=ATMEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<GetCardDetails_Result> GetCardDetails(Nullable<long> cardNumber, Nullable<int> pin)
        {
            var cardNumberParameter = cardNumber.HasValue ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(long));
    
            var pinParameter = pin.HasValue ?
                new ObjectParameter("Pin", pin) :
                new ObjectParameter("Pin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCardDetails_Result>("GetCardDetails", cardNumberParameter, pinParameter);
        }
    
        public virtual ObjectResult<spNewAccount_Result> spNewAccount(Nullable<long> cardNumber, string name, Nullable<int> pin, Nullable<long> currentBalance)
        {
            var cardNumberParameter = cardNumber.HasValue ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var pinParameter = pin.HasValue ?
                new ObjectParameter("Pin", pin) :
                new ObjectParameter("Pin", typeof(int));
    
            var currentBalanceParameter = currentBalance.HasValue ?
                new ObjectParameter("CurrentBalance", currentBalance) :
                new ObjectParameter("CurrentBalance", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spNewAccount_Result>("spNewAccount", cardNumberParameter, nameParameter, pinParameter, currentBalanceParameter);
        }
    
        public virtual int UpdateCardDetails(Nullable<int> operation, Nullable<long> cardNumber, Nullable<int> pin, Nullable<int> newPin, Nullable<long> newBalance)
        {
            var operationParameter = operation.HasValue ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(int));
    
            var cardNumberParameter = cardNumber.HasValue ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(long));
    
            var pinParameter = pin.HasValue ?
                new ObjectParameter("Pin", pin) :
                new ObjectParameter("Pin", typeof(int));
    
            var newPinParameter = newPin.HasValue ?
                new ObjectParameter("NewPin", newPin) :
                new ObjectParameter("NewPin", typeof(int));
    
            var newBalanceParameter = newBalance.HasValue ?
                new ObjectParameter("NewBalance", newBalance) :
                new ObjectParameter("NewBalance", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCardDetails", operationParameter, cardNumberParameter, pinParameter, newPinParameter, newBalanceParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ValidateCardDetails(Nullable<int> operation, Nullable<long> cardNumber, Nullable<int> pin)
        {
            var operationParameter = operation.HasValue ?
                new ObjectParameter("Operation", operation) :
                new ObjectParameter("Operation", typeof(int));
    
            var cardNumberParameter = cardNumber.HasValue ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(long));
    
            var pinParameter = pin.HasValue ?
                new ObjectParameter("Pin", pin) :
                new ObjectParameter("Pin", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ValidateCardDetails", operationParameter, cardNumberParameter, pinParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ValidateCardNumber(Nullable<long> cardNumber)
        {
            var cardNumberParameter = cardNumber.HasValue ?
                new ObjectParameter("CardNumber", cardNumber) :
                new ObjectParameter("CardNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ValidateCardNumber", cardNumberParameter);
        }
    }
}
